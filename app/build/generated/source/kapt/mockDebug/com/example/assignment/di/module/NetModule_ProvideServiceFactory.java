// Generated by Dagger (https://google.github.io/dagger).
package com.example.assignment.di.module;

import com.example.assignment.api.ApiService;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Retrofit;

public final class NetModule_ProvideServiceFactory implements Factory<ApiService> {
  private final NetModule module;

  private final Provider<Retrofit> retrofitProvider;

  public NetModule_ProvideServiceFactory(NetModule module, Provider<Retrofit> retrofitProvider) {
    this.module = module;
    this.retrofitProvider = retrofitProvider;
  }

  @Override
  public ApiService get() {
    return provideService(module, retrofitProvider.get());
  }

  public static NetModule_ProvideServiceFactory create(NetModule module,
      Provider<Retrofit> retrofitProvider) {
    return new NetModule_ProvideServiceFactory(module, retrofitProvider);
  }

  public static ApiService provideService(NetModule instance, Retrofit retrofit) {
    return Preconditions.checkNotNull(instance.provideService(retrofit), "Cannot return null from a non-@Nullable @Provides method");
  }
}
