// Generated by Dagger (https://google.github.io/dagger).
package com.example.assignment.di.component;

import android.app.Activity;
import android.app.Application;
import android.content.Context;
import androidx.lifecycle.ViewModel;
import com.example.assignment.App;
import com.example.assignment.App_MembersInjector;
import com.example.assignment.api.ApiService;
import com.example.assignment.di.builder.ActivityBuilder_BindMainActivity;
import com.example.assignment.di.builder.ViewModelFactory;
import com.example.assignment.di.builder.ViewModelFactory_Factory;
import com.example.assignment.di.module.ContextModule;
import com.example.assignment.di.module.ContextModule_ProvideContextFactory;
import com.example.assignment.di.module.DataBaseModule;
import com.example.assignment.di.module.DataBaseModule_ProvideRoomDatabaseFactory;
import com.example.assignment.di.module.NetModule;
import com.example.assignment.di.module.NetModule_ProvideRepositoryFactory;
import com.example.assignment.di.module.NetModule_ProvideServiceFactory;
import com.example.assignment.di.module.NetModule_ProvidesGsonConverterFactoryFactory;
import com.example.assignment.di.module.NetModule_ProvidesOkHttpClientFactory;
import com.example.assignment.di.module.NetModule_ProvidesRetrofitFactory;
import com.example.assignment.di.module.NetModule_ProvidesRxJavaCallAdapterFactoryFactory;
import com.example.assignment.model.database.AppDatabase;
import com.example.assignment.repository.AppRepository;
import com.example.assignment.ui.MainActivity;
import com.example.assignment.ui.MainActivity_MembersInjector;
import com.example.assignment.viewmodel.AppViewModel;
import com.example.assignment.viewmodel.AppViewModel_Factory;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;
import retrofit2.adapter.rxjava2.RxJava2CallAdapterFactory;
import retrofit2.converter.gson.GsonConverterFactory;

public final class DaggerCoreComponent implements CoreComponent {
  private Provider<ActivityBuilder_BindMainActivity.MainActivitySubcomponent.Factory> mainActivitySubcomponentFactoryProvider;

  private Provider<GsonConverterFactory> providesGsonConverterFactoryProvider;

  private Provider<RxJava2CallAdapterFactory> providesRxJavaCallAdapterFactoryProvider;

  private Provider<Application> applicationProvider;

  private Provider<Context> provideContextProvider;

  private Provider<OkHttpClient> providesOkHttpClientProvider;

  private Provider<Retrofit> providesRetrofitProvider;

  private Provider<ApiService> provideServiceProvider;

  private Provider<AppDatabase> provideRoomDatabaseProvider;

  private Provider<AppRepository> provideRepositoryProvider;

  private Provider<AppViewModel> appViewModelProvider;

  private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>> mapOfClassOfAndProviderOfViewModelProvider;

  private Provider<ViewModelFactory> viewModelFactoryProvider;

  private DaggerCoreComponent(ContextModule contextModuleParam, NetModule netModuleParam,
      DataBaseModule dataBaseModuleParam, Application applicationParam) {

    initialize(contextModuleParam, netModuleParam, dataBaseModuleParam, applicationParam);
  }

  public static CoreComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return Collections.<Class<?>, Provider<AndroidInjector.Factory<?>>>singletonMap(MainActivity.class, (Provider) mainActivitySubcomponentFactoryProvider);}

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());}

  @SuppressWarnings("unchecked")
  private void initialize(final ContextModule contextModuleParam, final NetModule netModuleParam,
      final DataBaseModule dataBaseModuleParam, final Application applicationParam) {
    this.mainActivitySubcomponentFactoryProvider = new Provider<ActivityBuilder_BindMainActivity.MainActivitySubcomponent.Factory>() {
      @Override
      public ActivityBuilder_BindMainActivity.MainActivitySubcomponent.Factory get() {
        return new MainActivitySubcomponentFactory();}
    };
    this.providesGsonConverterFactoryProvider = DoubleCheck.provider(NetModule_ProvidesGsonConverterFactoryFactory.create(netModuleParam));
    this.providesRxJavaCallAdapterFactoryProvider = DoubleCheck.provider(NetModule_ProvidesRxJavaCallAdapterFactoryFactory.create(netModuleParam));
    this.applicationProvider = InstanceFactory.create(applicationParam);
    this.provideContextProvider = DoubleCheck.provider(ContextModule_ProvideContextFactory.create(contextModuleParam, applicationProvider));
    this.providesOkHttpClientProvider = DoubleCheck.provider(NetModule_ProvidesOkHttpClientFactory.create(netModuleParam, provideContextProvider));
    this.providesRetrofitProvider = DoubleCheck.provider(NetModule_ProvidesRetrofitFactory.create(netModuleParam, providesGsonConverterFactoryProvider, providesRxJavaCallAdapterFactoryProvider, providesOkHttpClientProvider));
    this.provideServiceProvider = DoubleCheck.provider(NetModule_ProvideServiceFactory.create(netModuleParam, providesRetrofitProvider));
    this.provideRoomDatabaseProvider = DoubleCheck.provider(DataBaseModule_ProvideRoomDatabaseFactory.create(dataBaseModuleParam, applicationProvider));
    this.provideRepositoryProvider = NetModule_ProvideRepositoryFactory.create(netModuleParam, provideServiceProvider, provideRoomDatabaseProvider);
    this.appViewModelProvider = AppViewModel_Factory.create(provideRepositoryProvider);
    this.mapOfClassOfAndProviderOfViewModelProvider = MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(1).put(AppViewModel.class, (Provider) appViewModelProvider).build();
    this.viewModelFactoryProvider = DoubleCheck.provider(ViewModelFactory_Factory.create(mapOfClassOfAndProviderOfViewModelProvider));
  }

  @Override
  public void inject(App app) {
    injectApp(app);}

  private App injectApp(App instance) {
    App_MembersInjector.injectDispatchingAndroidInjector(instance, getDispatchingAndroidInjectorOfActivity());
    return instance;
  }

  private static final class Builder implements CoreComponent.Builder {
    private Application application;

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public CoreComponent build() {
      Preconditions.checkBuilderRequirement(application, Application.class);
      return new DaggerCoreComponent(new ContextModule(), new NetModule(), new DataBaseModule(), application);
    }
  }

  private final class MainActivitySubcomponentFactory implements ActivityBuilder_BindMainActivity.MainActivitySubcomponent.Factory {
    @Override
    public ActivityBuilder_BindMainActivity.MainActivitySubcomponent create(MainActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new MainActivitySubcomponentImpl(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl implements ActivityBuilder_BindMainActivity.MainActivitySubcomponent {
    private MainActivitySubcomponentImpl(MainActivity arg0) {

    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);}

    private MainActivity injectMainActivity(MainActivity instance) {
      MainActivity_MembersInjector.injectViewModelFactory(instance, DaggerCoreComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }
}
