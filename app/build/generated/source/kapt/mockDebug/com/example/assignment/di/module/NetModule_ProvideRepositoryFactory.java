// Generated by Dagger (https://google.github.io/dagger).
package com.example.assignment.di.module;

import com.example.assignment.api.ApiService;
import com.example.assignment.model.database.AppDatabase;
import com.example.assignment.repository.AppRepository;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class NetModule_ProvideRepositoryFactory implements Factory<AppRepository> {
  private final NetModule module;

  private final Provider<ApiService> apiServiceProvider;

  private final Provider<AppDatabase> databaseProvider;

  public NetModule_ProvideRepositoryFactory(NetModule module,
      Provider<ApiService> apiServiceProvider, Provider<AppDatabase> databaseProvider) {
    this.module = module;
    this.apiServiceProvider = apiServiceProvider;
    this.databaseProvider = databaseProvider;
  }

  @Override
  public AppRepository get() {
    return provideRepository(module, apiServiceProvider.get(), databaseProvider.get());
  }

  public static NetModule_ProvideRepositoryFactory create(NetModule module,
      Provider<ApiService> apiServiceProvider, Provider<AppDatabase> databaseProvider) {
    return new NetModule_ProvideRepositoryFactory(module, apiServiceProvider, databaseProvider);
  }

  public static AppRepository provideRepository(NetModule instance, ApiService apiService,
      AppDatabase database) {
    return Preconditions.checkNotNull(instance.provideRepository(apiService, database), "Cannot return null from a non-@Nullable @Provides method");
  }
}
