// Generated by Dagger (https://google.github.io/dagger).
package com.example.assignment.di.module;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;
import retrofit2.adapter.rxjava2.RxJava2CallAdapterFactory;
import retrofit2.converter.gson.GsonConverterFactory;

public final class NetModule_ProvidesRetrofitFactory implements Factory<Retrofit> {
  private final NetModule module;

  private final Provider<GsonConverterFactory> gsonConverterFactoryProvider;

  private final Provider<RxJava2CallAdapterFactory> rxJava2CallAdapterFactoryProvider;

  private final Provider<OkHttpClient> okHttpClientProvider;

  public NetModule_ProvidesRetrofitFactory(NetModule module,
      Provider<GsonConverterFactory> gsonConverterFactoryProvider,
      Provider<RxJava2CallAdapterFactory> rxJava2CallAdapterFactoryProvider,
      Provider<OkHttpClient> okHttpClientProvider) {
    this.module = module;
    this.gsonConverterFactoryProvider = gsonConverterFactoryProvider;
    this.rxJava2CallAdapterFactoryProvider = rxJava2CallAdapterFactoryProvider;
    this.okHttpClientProvider = okHttpClientProvider;
  }

  @Override
  public Retrofit get() {
    return providesRetrofit(module, gsonConverterFactoryProvider.get(), rxJava2CallAdapterFactoryProvider.get(), okHttpClientProvider.get());
  }

  public static NetModule_ProvidesRetrofitFactory create(NetModule module,
      Provider<GsonConverterFactory> gsonConverterFactoryProvider,
      Provider<RxJava2CallAdapterFactory> rxJava2CallAdapterFactoryProvider,
      Provider<OkHttpClient> okHttpClientProvider) {
    return new NetModule_ProvidesRetrofitFactory(module, gsonConverterFactoryProvider, rxJava2CallAdapterFactoryProvider, okHttpClientProvider);
  }

  public static Retrofit providesRetrofit(NetModule instance,
      GsonConverterFactory gsonConverterFactory,
      RxJava2CallAdapterFactory rxJava2CallAdapterFactory, OkHttpClient okHttpClient) {
    return Preconditions.checkNotNull(instance.providesRetrofit(gsonConverterFactory, rxJava2CallAdapterFactory, okHttpClient), "Cannot return null from a non-@Nullable @Provides method");
  }
}
